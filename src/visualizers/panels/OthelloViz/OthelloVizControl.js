/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Dec 05 2023 18:10:18 GMT-0600 (Central Standard Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames',
    'miniproject/constants'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function OthelloVizControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._updateWidget = null;
        this._descriptor = null;

        this._logger.debug('ctor finished');

        //TODO: this information should be gathered from the META
        //this._piece_b = '/J/Q';
        //this._piece_w = '/J/K';
    }

    OthelloVizControl.prototype.registerUpdate = function (func) {
        console.log('trying to register...');
        const firstTry = this._updateWidget === null ? true : false;
        this._updateWidget = func;
        if(this._descriptor && firstTry) {
            this._descriptor = {player: "player", board: [1, 2, 3], win: false}
            this._updateWidget(this._descriptor);
        }
    };
    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    OthelloVizControl.prototype.selectedObjectChanged = function (nodeId) {
        const {_logger, _client} = this;

        _logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (this._currentNodeId) {
            _client.removeUI(this._territoryId);

        }

        this._currentNodeId = nodeId;
        this._currentNodeParentId = _client.getNode(this._currentNodeId).getParentId();

        if (typeof this._currentNodeId === 'string') {
            // Put new node's info into territory rules
            this._selfPatterns = {};
            this._selfPatterns[this._currentNodeId] = {children: 3}; //all workflows in the project

            this._territoryId = _client.addUI(this, events => {
                this._eventCallback(events);
            });

            // Update the territory
            _client.updateTerritory(this._territoryId, this._selfPatterns);
        }
    };

    OthelloVizControl.prototype._createDescriptor = function () {
        const {_client, _META, _currentNodeId, _logger} = this;
        if (typeof _currentNodeId === 'string') {
            const context = _client.getCurrentPluginContext('BuildOthello');
            context.managerConfig.activeNode = _currentNodeId;
            context.managerConfig.namespace = null;
            context.pluginConfig = {};

            _client.runBrowserPlugin('BuildOthello', context, (err, result)=>{
                // console.log('export:', err, result);
                if (err === null && result && result.success) {
                    const descriptor = JSON.parse(result.messages[0].message);
                    this._descriptor = descriptor;
                    if(this._updateWidget) {
                        this._updateWidget(descriptor);
                    }
                } else {
                    //TODO - make a proper way of handling this
                    _logger.error('Failed to collect descriptor', err);
                }
            });
        }
    };

    OthelloVizControl.prototype.playerMoves = function (player, position) {
        console.log(player, position);
        const {_client, _currentNodeId, _logger} = this;
        if (typeof _currentNodeId === 'string') {
            const context = _client.getCurrentPluginContext('PlayerMoves');
            context.managerConfig.activeNode = _currentNodeId;
            context.managerConfig.namespace = null;
            context.pluginConfig = {position};

            _client.runBrowserPlugin('PlayerMoves', context, (err, result)=>{
                // console.log('export:', err, result);
                if (err === null && result && result.success) {
                    //TODO: - there is nothing to do as the plugin updated the model
                } else {
                    //TODO - make a proper way of handling this
                    _logger.error('Failed to make move', err);
                }
            });
        }
    }
    /* * * * * * * * Node Event Handling * * * * * * * */
    OthelloVizControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');
        // if(this._updateWidget !== null) {
            // console.log('we got widget connection');
            // this._updateWidget([],[],{});
        // }

        if (events[0] && events[0].etype === 'complete') {
            //we have what we need
            this._createDescriptor();
        }
        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    // OthelloVizControl.prototype._onLoad = function (gmeId) {
    //     var description = this._getObjectDescriptor(gmeId);
    //     this._widget.addNode(description);
    // };

    // OthelloVizControl.prototype._onUpdate = function (gmeId) {
    //     var description = this._getObjectDescriptor(gmeId);
    //     this._widget.updateNode(description);
    // };

    // OthelloVizControl.prototype._onUnload = function (gmeId) {
    //     this._widget.removeNode(gmeId);
    // };

    OthelloVizControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    OthelloVizControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
        this._updateWidget = null;
    };

    OthelloVizControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    OthelloVizControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    OthelloVizControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            //  trying to force a refresh in case of activation
            const nodeId = this._currentNodeId;
            this._currentNodeId = null;
            WebGMEGlobal.State.registerActiveObject(nodeId, {suppressVisualizerFromNode: true});
        }
    };

    OthelloVizControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
        this._updateWidget = null;
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    OthelloVizControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    OthelloVizControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    OthelloVizControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    OthelloVizControl.prototype._initializeToolbar = function () {
        const {_client, _logger} = this;
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnUndo = toolBar.addButton({
            title: 'Undo last move',
            icon: 'glyphicon glyphicon-step-backward',
            clickFn: function (/*data*/) {
                const context = _client.getCurrentPluginContext('Undo');
                context.managerConfig.activeNode = self._currentNodeParentId;
                context.managerConfig.namespace = null;
                context.pluginConfig = {};

                _client.runServerPlugin('Undo', context, (err, result)=>{
                    // console.log('export:', err, result);
                    if (err === null && result && result.success) {
                        //TODO: - there is nothing to do as the plugin updated the model
                        // const newGamePath = result.messages[0].message;
                        //WebGMEGlobal.State.registerActiveObject(self._currentNodeId);
                    } else {
                        //TODO - make a proper way of handling this
                        _logger.error('Failed to undo', err);
                    }
                });
            }
        });
        this._toolbarItems.push(this.$btnUndo);
        this.$btnUndo.hide();

        this.$btnAuto = toolBar.addButton({
            title: 'Automatically make next move',
            icon: 'glyphicon glyphicon-random',
            clickFn: function (/*data*/) {
                const context = _client.getCurrentPluginContext('AutoPlace');
                context.managerConfig.activeNode = self._currentNodeParentId;
                context.managerConfig.namespace = null;
                context.pluginConfig = {};

                _client.runServerPlugin('AutoPlace', context, (err, result)=>{
                    // console.log('export:', err, result);
                    if (err === null && result && result.success) {
                        //TODO: - there is nothing to do as the plugin updated the model
                        // const newGamePath = result.messages[0].message;
                        //WebGMEGlobal.State.registerActiveObject(self._currentNodeId);
                    } else {
                        //TODO - make a proper way of handling this
                        _logger.error('Failed to undo', err);
                    }
                });
            }
        });
        this._toolbarItems.push(this.$btnAuto);
        this.$btnAuto.hide();

        /************** Checkbox example *******************/

        // this.$cbShowConnection = toolBar.addCheckBox({
        //     title: 'toggle checkbox',
        //     icon: 'gme icon-gme_diagonal-arrow',
        //     checkChangedFn: function (data, checked) {
        //         self._logger.debug('Checkbox has been clicked!');
        //     }
        // });
        // this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return OthelloVizControl;
});
